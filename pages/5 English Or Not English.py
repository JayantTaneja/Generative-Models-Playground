import streamlit as st
import random
import time
from model import WaveNet


st.set_page_config(
    page_title="English or Not English?", page_icon=None, layout="centered", 
    initial_sidebar_state="auto", menu_items=None)

st.title("English Or Not English?")

st.markdown('''Here's a fun game, you shall be presented with a word, and your task is to guess whether the word was generated by the model or not.

Ready ? GO!
''')

# model_words = []
english_words = []
def load_model(path):
    model = WaveNet(
        pre_trained = True,
        device = 'cpu',
        checkpoint = path
    )
    
    st.session_state.model_eng = model

if "model_eng" not in st.session_state:
    load_model("checkpoints/model_english2.pth")
    st.session_state.model_type = "Default_eng"
    
    
# def load_model_words():
#     global model_words
#     with open(r"pages/out.txt", "r") as file:
#         model_words = file.readlines()
            
def load_english_words():
    global english_words
    with open(r"pages/eng.txt", "r") as file:
        english_words = file.readlines()
            
def get_word():
    is_model = False
    choice = random.choice([0, 1])

    if choice == 1:
        is_model = True
        word = st.session_state.model_eng.sample(1)[0]
        # word = random.choice(model_words)
    else:
        word = random.choice(english_words)
    
    return word, is_model

def clicked_model(is_from_model):
    if is_from_model:
         st.write("Hurray ! You Guessed it right")
    else:
        st.write("NOPE! ðŸ˜‚, this is a real english word")

def clicked_not_model(is_from_model):
    if is_from_model:
        st.write("NOPE! ðŸ˜‚, a model generated it")
    else:
        st.write("Hurray ! You Guessed it right")

def check_ans(ans, is_from_model):
    if ans == "Generated By Model":
        clicked_model(is_from_model)
    elif ans == "Not Generated By A Model":
        clicked_not_model(is_from_model)
        
load_english_words()
# load_model_words()

if 'curr_word' not in st.session_state:
    st.session_state.curr_word, st.session_state.is_from_model = get_word()

generate = st.button(label = "Generate new word")
if generate:
    st.session_state.curr_word, st.session_state.is_from_model = get_word()
    # word, is_from_model = get_word()

with st.form("Play"):
    # st.write(f"{word.lower()}")
    st.write(f"{st.session_state.curr_word.lower()}")
    # st.write(is_from_model)
    # st.write(st.session_state.is_from_model)
    ans = st.radio("Where did this word get generated from?",
                  ("Generated By Model", "Not Generated By A Model"))
    submitted = st.form_submit_button("Check")
    if(submitted):
        check_ans(ans, st.session_state.is_from_model)
